/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-02-23")
public class WinAPITechnologyVersions implements org.apache.thrift.TBase<WinAPITechnologyVersions, WinAPITechnologyVersions._Fields>, java.io.Serializable, Cloneable, Comparable<WinAPITechnologyVersions> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WinAPITechnologyVersions");

  private static final org.apache.thrift.protocol.TField VERSION_WIN16_FIELD_DESC = new org.apache.thrift.protocol.TField("versionWin16", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField VERSION_WIN32_FIELD_DESC = new org.apache.thrift.protocol.TField("versionWin32", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField VERSION_WIN32S_FIELD_DESC = new org.apache.thrift.protocol.TField("versionWin32s", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField VERSION_WIN64_FIELD_DESC = new org.apache.thrift.protocol.TField("versionWin64", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new WinAPITechnologyVersionsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new WinAPITechnologyVersionsTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String versionWin16; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String versionWin32; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String versionWin32s; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String versionWin64; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VERSION_WIN16((short)1, "versionWin16"),
    VERSION_WIN32((short)2, "versionWin32"),
    VERSION_WIN32S((short)3, "versionWin32s"),
    VERSION_WIN64((short)4, "versionWin64");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERSION_WIN16
          return VERSION_WIN16;
        case 2: // VERSION_WIN32
          return VERSION_WIN32;
        case 3: // VERSION_WIN32S
          return VERSION_WIN32S;
        case 4: // VERSION_WIN64
          return VERSION_WIN64;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERSION_WIN16, new org.apache.thrift.meta_data.FieldMetaData("versionWin16", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION_WIN32, new org.apache.thrift.meta_data.FieldMetaData("versionWin32", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION_WIN32S, new org.apache.thrift.meta_data.FieldMetaData("versionWin32s", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION_WIN64, new org.apache.thrift.meta_data.FieldMetaData("versionWin64", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WinAPITechnologyVersions.class, metaDataMap);
  }

  public WinAPITechnologyVersions() {
  }

  public WinAPITechnologyVersions(
    java.lang.String versionWin16,
    java.lang.String versionWin32,
    java.lang.String versionWin32s,
    java.lang.String versionWin64)
  {
    this();
    this.versionWin16 = versionWin16;
    this.versionWin32 = versionWin32;
    this.versionWin32s = versionWin32s;
    this.versionWin64 = versionWin64;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WinAPITechnologyVersions(WinAPITechnologyVersions other) {
    if (other.isSetVersionWin16()) {
      this.versionWin16 = other.versionWin16;
    }
    if (other.isSetVersionWin32()) {
      this.versionWin32 = other.versionWin32;
    }
    if (other.isSetVersionWin32s()) {
      this.versionWin32s = other.versionWin32s;
    }
    if (other.isSetVersionWin64()) {
      this.versionWin64 = other.versionWin64;
    }
  }

  public WinAPITechnologyVersions deepCopy() {
    return new WinAPITechnologyVersions(this);
  }

  @Override
  public void clear() {
    this.versionWin16 = null;
    this.versionWin32 = null;
    this.versionWin32s = null;
    this.versionWin64 = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getVersionWin16() {
    return this.versionWin16;
  }

  public WinAPITechnologyVersions setVersionWin16(@org.apache.thrift.annotation.Nullable java.lang.String versionWin16) {
    this.versionWin16 = versionWin16;
    return this;
  }

  public void unsetVersionWin16() {
    this.versionWin16 = null;
  }

  /** Returns true if field versionWin16 is set (has been assigned a value) and false otherwise */
  public boolean isSetVersionWin16() {
    return this.versionWin16 != null;
  }

  public void setVersionWin16IsSet(boolean value) {
    if (!value) {
      this.versionWin16 = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getVersionWin32() {
    return this.versionWin32;
  }

  public WinAPITechnologyVersions setVersionWin32(@org.apache.thrift.annotation.Nullable java.lang.String versionWin32) {
    this.versionWin32 = versionWin32;
    return this;
  }

  public void unsetVersionWin32() {
    this.versionWin32 = null;
  }

  /** Returns true if field versionWin32 is set (has been assigned a value) and false otherwise */
  public boolean isSetVersionWin32() {
    return this.versionWin32 != null;
  }

  public void setVersionWin32IsSet(boolean value) {
    if (!value) {
      this.versionWin32 = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getVersionWin32s() {
    return this.versionWin32s;
  }

  public WinAPITechnologyVersions setVersionWin32s(@org.apache.thrift.annotation.Nullable java.lang.String versionWin32s) {
    this.versionWin32s = versionWin32s;
    return this;
  }

  public void unsetVersionWin32s() {
    this.versionWin32s = null;
  }

  /** Returns true if field versionWin32s is set (has been assigned a value) and false otherwise */
  public boolean isSetVersionWin32s() {
    return this.versionWin32s != null;
  }

  public void setVersionWin32sIsSet(boolean value) {
    if (!value) {
      this.versionWin32s = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getVersionWin64() {
    return this.versionWin64;
  }

  public WinAPITechnologyVersions setVersionWin64(@org.apache.thrift.annotation.Nullable java.lang.String versionWin64) {
    this.versionWin64 = versionWin64;
    return this;
  }

  public void unsetVersionWin64() {
    this.versionWin64 = null;
  }

  /** Returns true if field versionWin64 is set (has been assigned a value) and false otherwise */
  public boolean isSetVersionWin64() {
    return this.versionWin64 != null;
  }

  public void setVersionWin64IsSet(boolean value) {
    if (!value) {
      this.versionWin64 = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case VERSION_WIN16:
      if (value == null) {
        unsetVersionWin16();
      } else {
        setVersionWin16((java.lang.String)value);
      }
      break;

    case VERSION_WIN32:
      if (value == null) {
        unsetVersionWin32();
      } else {
        setVersionWin32((java.lang.String)value);
      }
      break;

    case VERSION_WIN32S:
      if (value == null) {
        unsetVersionWin32s();
      } else {
        setVersionWin32s((java.lang.String)value);
      }
      break;

    case VERSION_WIN64:
      if (value == null) {
        unsetVersionWin64();
      } else {
        setVersionWin64((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case VERSION_WIN16:
      return getVersionWin16();

    case VERSION_WIN32:
      return getVersionWin32();

    case VERSION_WIN32S:
      return getVersionWin32s();

    case VERSION_WIN64:
      return getVersionWin64();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case VERSION_WIN16:
      return isSetVersionWin16();
    case VERSION_WIN32:
      return isSetVersionWin32();
    case VERSION_WIN32S:
      return isSetVersionWin32s();
    case VERSION_WIN64:
      return isSetVersionWin64();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof WinAPITechnologyVersions)
      return this.equals((WinAPITechnologyVersions)that);
    return false;
  }

  public boolean equals(WinAPITechnologyVersions that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_versionWin16 = true && this.isSetVersionWin16();
    boolean that_present_versionWin16 = true && that.isSetVersionWin16();
    if (this_present_versionWin16 || that_present_versionWin16) {
      if (!(this_present_versionWin16 && that_present_versionWin16))
        return false;
      if (!this.versionWin16.equals(that.versionWin16))
        return false;
    }

    boolean this_present_versionWin32 = true && this.isSetVersionWin32();
    boolean that_present_versionWin32 = true && that.isSetVersionWin32();
    if (this_present_versionWin32 || that_present_versionWin32) {
      if (!(this_present_versionWin32 && that_present_versionWin32))
        return false;
      if (!this.versionWin32.equals(that.versionWin32))
        return false;
    }

    boolean this_present_versionWin32s = true && this.isSetVersionWin32s();
    boolean that_present_versionWin32s = true && that.isSetVersionWin32s();
    if (this_present_versionWin32s || that_present_versionWin32s) {
      if (!(this_present_versionWin32s && that_present_versionWin32s))
        return false;
      if (!this.versionWin32s.equals(that.versionWin32s))
        return false;
    }

    boolean this_present_versionWin64 = true && this.isSetVersionWin64();
    boolean that_present_versionWin64 = true && that.isSetVersionWin64();
    if (this_present_versionWin64 || that_present_versionWin64) {
      if (!(this_present_versionWin64 && that_present_versionWin64))
        return false;
      if (!this.versionWin64.equals(that.versionWin64))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetVersionWin16()) ? 131071 : 524287);
    if (isSetVersionWin16())
      hashCode = hashCode * 8191 + versionWin16.hashCode();

    hashCode = hashCode * 8191 + ((isSetVersionWin32()) ? 131071 : 524287);
    if (isSetVersionWin32())
      hashCode = hashCode * 8191 + versionWin32.hashCode();

    hashCode = hashCode * 8191 + ((isSetVersionWin32s()) ? 131071 : 524287);
    if (isSetVersionWin32s())
      hashCode = hashCode * 8191 + versionWin32s.hashCode();

    hashCode = hashCode * 8191 + ((isSetVersionWin64()) ? 131071 : 524287);
    if (isSetVersionWin64())
      hashCode = hashCode * 8191 + versionWin64.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(WinAPITechnologyVersions other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetVersionWin16()).compareTo(other.isSetVersionWin16());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersionWin16()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versionWin16, other.versionWin16);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVersionWin32()).compareTo(other.isSetVersionWin32());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersionWin32()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versionWin32, other.versionWin32);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVersionWin32s()).compareTo(other.isSetVersionWin32s());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersionWin32s()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versionWin32s, other.versionWin32s);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVersionWin64()).compareTo(other.isSetVersionWin64());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersionWin64()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versionWin64, other.versionWin64);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("WinAPITechnologyVersions(");
    boolean first = true;

    sb.append("versionWin16:");
    if (this.versionWin16 == null) {
      sb.append("null");
    } else {
      sb.append(this.versionWin16);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("versionWin32:");
    if (this.versionWin32 == null) {
      sb.append("null");
    } else {
      sb.append(this.versionWin32);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("versionWin32s:");
    if (this.versionWin32s == null) {
      sb.append("null");
    } else {
      sb.append(this.versionWin32s);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("versionWin64:");
    if (this.versionWin64 == null) {
      sb.append("null");
    } else {
      sb.append(this.versionWin64);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WinAPITechnologyVersionsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WinAPITechnologyVersionsStandardScheme getScheme() {
      return new WinAPITechnologyVersionsStandardScheme();
    }
  }

  private static class WinAPITechnologyVersionsStandardScheme extends org.apache.thrift.scheme.StandardScheme<WinAPITechnologyVersions> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WinAPITechnologyVersions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERSION_WIN16
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.versionWin16 = iprot.readString();
              struct.setVersionWin16IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VERSION_WIN32
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.versionWin32 = iprot.readString();
              struct.setVersionWin32IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VERSION_WIN32S
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.versionWin32s = iprot.readString();
              struct.setVersionWin32sIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VERSION_WIN64
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.versionWin64 = iprot.readString();
              struct.setVersionWin64IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WinAPITechnologyVersions struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.versionWin16 != null) {
        oprot.writeFieldBegin(VERSION_WIN16_FIELD_DESC);
        oprot.writeString(struct.versionWin16);
        oprot.writeFieldEnd();
      }
      if (struct.versionWin32 != null) {
        oprot.writeFieldBegin(VERSION_WIN32_FIELD_DESC);
        oprot.writeString(struct.versionWin32);
        oprot.writeFieldEnd();
      }
      if (struct.versionWin32s != null) {
        oprot.writeFieldBegin(VERSION_WIN32S_FIELD_DESC);
        oprot.writeString(struct.versionWin32s);
        oprot.writeFieldEnd();
      }
      if (struct.versionWin64 != null) {
        oprot.writeFieldBegin(VERSION_WIN64_FIELD_DESC);
        oprot.writeString(struct.versionWin64);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WinAPITechnologyVersionsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WinAPITechnologyVersionsTupleScheme getScheme() {
      return new WinAPITechnologyVersionsTupleScheme();
    }
  }

  private static class WinAPITechnologyVersionsTupleScheme extends org.apache.thrift.scheme.TupleScheme<WinAPITechnologyVersions> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WinAPITechnologyVersions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetVersionWin16()) {
        optionals.set(0);
      }
      if (struct.isSetVersionWin32()) {
        optionals.set(1);
      }
      if (struct.isSetVersionWin32s()) {
        optionals.set(2);
      }
      if (struct.isSetVersionWin64()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetVersionWin16()) {
        oprot.writeString(struct.versionWin16);
      }
      if (struct.isSetVersionWin32()) {
        oprot.writeString(struct.versionWin32);
      }
      if (struct.isSetVersionWin32s()) {
        oprot.writeString(struct.versionWin32s);
      }
      if (struct.isSetVersionWin64()) {
        oprot.writeString(struct.versionWin64);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WinAPITechnologyVersions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.versionWin16 = iprot.readString();
        struct.setVersionWin16IsSet(true);
      }
      if (incoming.get(1)) {
        struct.versionWin32 = iprot.readString();
        struct.setVersionWin32IsSet(true);
      }
      if (incoming.get(2)) {
        struct.versionWin32s = iprot.readString();
        struct.setVersionWin32sIsSet(true);
      }
      if (incoming.get(3)) {
        struct.versionWin64 = iprot.readString();
        struct.setVersionWin64IsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

